A BrainFuck Compiler Plugin for VIM

Brainfuck is an eight-instruction turing-complete programming language. I emplement a small Brainfuck interpreter in pure VIM script. It's based on VIM 8.1 and offers you a really simple playground.

Install with Pathogen, execute the following commands:

    cd ~/.vim/bundle/
    git clone https://github.com/jayli/vim-brainfuck

Useage: Run this command in vim

    :BrainFuck

For example, Copy this program to your vim editor and exec ":BrainFuck"

    ++++++++++[>+++++++>++++++++++>+++>+<<<<-]
    >++.>+.+++++++..+++.>++.<<+++++++++++++++.
    >.+++.------.--------.>+.>.

It will output "Hello World!".

Print program memory: Insert '|' into your source code to print memory. Insert '$' to print memory and terminate the program. For example:

    +++>|++>+|>$---

This code will print these logs:

    >>> ====== Interpreter State ======
    >>> Program:       +++(>)++>+>---
    >>> Buffer Array:  3 *0
    >>> ------  Meet Pipe: Log  ------
    >>> ====== Interpreter State ======
    >>> Program:       +++>++>(+)>---
    >>> Buffer Array:  3 2 *1
    >>> ------  Meet Pipe: Log  ------
    >>> ====== Interpreter State ======
    >>> Program:       +++>++>+(>)---
    >>> Buffer Array:  3 2 1 *0
    >>> ------ Meet Dollor: Stop ------

BF basic algorithms:

    Clearing a Value: {x} → {0}
    [-]

    Moving a Value: {x, 0} → {0, x} (We used this algorithm earlier)
    [->+<]

    Copying a Value: {x, 0, 0} → {x, x, 0}
    [->+>+<<]>>[-<<+>>]<<

    Addition: {x, y} → {0, x+y}
    [->+<]

    Subtraction: {x, y} → {x-y, 0}
    >[-<->]<

    Multiplication: {x, y, 0, 0} → {0, y, x*y, 0}
    [->[->+>+<<]>>[-<<+>>]<<<]

    Exponentiation: {x, y, 0, 0, 0} → {x, 0, pow(x, y), 0, 0}
    >>+<[->[-<<[->>>+>+<<<<]>>>>[-<<<<+>>>>]<<]>[-<+>]<<]<

    Division: {x, y, 0, 0, 0, 0} → {x/y, x%y, 0, 0, 0, 0}
    [>[->+>+<<]>[-<<-[>]>>>[<[-<->]<[>]>>[[-]>>+<]>-<]<<]>>>+<<[-<<+>>]<<<]
    >>>>>[-<<<<<+>>>>>]<<<<<
    Warning: When y=0, an infinite loop will result.

    Loop: loop 10 times
    ++++++++++[>(dosth)<-]

    Input a value: {0, input}
    ,[->+<]>

    Move cell0 to cell2: {x,0,0} → {0,0,x}
    >>[-]<<[->>+<<]

What's more:

More info about BrainFuck: http://en.wikipedia.org/wiki/Brainfuck
BF Playground: https://minond.xyz/brainfuck/
BF algorithms: https://esolangs.org/wiki/Brainfuck_algorithms
BF interpreter written in BF: http://www.iwriteiam.nl/Ha_bf_inter.html
Other esoteric programming languages: https://esolangs.org/wiki/Language_list

(C) Jayli 2020
This programm is licensed under the terms of the
DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE.
